mysql -uroot
create database books;
show create database books;
drop database books;
create database books default character set utf8mb4;
use books;

create table `publisher` (
`publisher_id` int(10) unsigned not null auto_increment primary key,
`name` varchar(512) not null,
`site` varchar(128) null
) engine = InnoDB;

create table `genre` (
`genre_id` int(10) unsigned not null auto_increment,
`name` varchar(64) not null comment 'название жанра',
primary key (`genre_id`),
unique key `uq_name` (`name`)
) auto_increment = 10;

create table author (
author_id int unsigned not null auto_increment primary key,
name varchar(512) not null,
gender enum('male', 'female') default 'male',
birthday date
);

create table book like course.book;

create table `book` (
`book_id` int(10) unsigned not null auto_increment,
`title` varchar(1024) not null,
`isbn` varchar(13) not null,
`year` date not null,
`publisher_id` int(11) unsigned not null,
`genre_id` int(11) unsigned not null,
primary key (`book_id`),
unique key `isbn_UNIQUE` (`isbn`),
key `idx_publisher` (`publisher_id`),
key `idx_genre` (`genre_id`)
) engine=InnoDB default charset=utf8mb4;

create table book_author (
book_id int(10) unsigned not null,
author_id int(10) unsigned not null,
constraint `fk_book` foreign key (`book_id`) references `book` (`book_id`) on
delete cascade on update cascade,
constraint `fk_author` foreign key (`author_id`) references `author` (`author_id`)
on delete cascade on update cascade
);

ALTER TABLE `books`.`book` 
ADD CONSTRAINT `fk_publisher`
  FOREIGN KEY (`publisher_id`)
  REFERENCES `books`.`publisher` (`publisher_id`)
  ON DELETE CASCADE
  ON UPDATE CASCADE,
ADD CONSTRAINT `fk_genre`
  FOREIGN KEY (`genre_id`)
  REFERENCES `books`.`genre` (`genre_id`)
  ON DELETE CASCADE
  ON UPDATE CASCADE;

show create table books.book;

ALTER TABLE `books`.`author` 
ADD COLUMN `rate` INT NOT NULL DEFAULT 0 AFTER `birthday`,
ADD INDEX `idx_rate` (`rate` ASC);

 ----

show databases;

create database products default character set utf8mb4;

use products;
 
create table `products` (
`product_id` int(10) unsigned not null auto_increment,
`product_name` varchar(64) not null comment 'название продукта',
primary key (`product_id`)
) auto_increment = 1;

insert into products (product_name) values ('яблоки');
insert into products (product_name) values ('роботы');
яблоки
роботы

select * from products;
 
create table `sales` (
`year` int(10) unsigned not null,
`product_id` int(10) unsigned not null,
`income` int(10) unsigned not null
);
 
insert into sales (year, product_id, income) values (2000, 1, 100); 
select * from sales;
insert into sales (year, product_id, income) values (2000, 2, 123); 
insert into sales (year, product_id, income) values (2000, 1, 12); 
insert into sales (year, product_id, income) values (2001, 1, 234); 
insert into sales (year, product_id, income) values (2002, 2, 543); 
insert into sales (year, product_id, income) values (2003, 1, 7654); 
insert into sales (year, product_id, income) values (2003, 2, 876); 
insert into sales (year, product_id, income) values (2003, 2, 1233); 
insert into sales (year, product_id, income) values (2004, 3, 123);
 
select * from sales join products on sales.product_id = products.product_id;

select * from sales join products using(product_id); 

select * from sales natural join products; 

select * from sales natural left join products; 

select * from sales natural left join products where products.product_id is null; 

select product_id, sum(income) from sales group by product_id;

select year, sum(income) from sales group by year;

select year, product_id, sum(income) from sales group by year, product_id;

select year, product_id, sum(income) from sales group by year, product_id with rollup;

select year, sum(income) from sales group by year having sum(income)<200;

select year, sum(income) as sales from sales group by year having sales<200;

mysql> select 1;
+---+
| 1 |
+---+
| 1 |
+---+
1 row in set (0.00 sec)

mysql> select 1 as one;
+-----+
| one |
+-----+
|   1 |
+-----+
1 row in set (0.00 sec)
mysql> select 1 as one union select 2 as two;
+-----+
| one |
+-----+
|   1 |
|   2 |
+-----+
mysql> select 1 as one union select 1 as two;
+-----+
| one |
+-----+
|   1 |
+-----+
1 row in set (0.00 sec)

mysql> select 1 as one union all select 1 as two;
+-----+
| one |
+-----+
|   1 |
|   1 |
+-----+
mysql> select 1 as one union all select 1 as two union select 1;
+-----+
| one |
+-----+
|   1 |
+-----+
1 row in set (0.00 sec)

mysql> select 1 as one union all select 1 as two union all select 1;
+-----+
| one |
+-----+
|   1 |
|   1 |
|   1 |
+-----+

Из таблицы продаж и таблицы товаров (как в видео) надо выбрать только название товара с максимальной общей суммой продаж за 2001-2003 годы. Какой SQL запрос поможет это сделать?


v SELECT product_name FROM sales NATURAL JOIN products WHERE year BETWEEN 2001 AND 2003 GROUP BY product_id ORDER BY SUM(income) DESC LIMIT 1;


SELECT product_name, MAX(income) FROM sales NATURAL JOIN products WHERE 2001 < year < 2003 GROUP BY product_id ORDER BY MAX(income) LIMIT 1;


SELECT product_name FROM sales WHERE year IN (2001,2002,2003) HAVING MAX(SUM(income));

---

mysql> select * from product;
+------------+---------+
| product_id | name    |
+------------+---------+
|          1 | Яблоки  |
|          2 | Роботы  |
|          3 | Окна    |
|          4 | Ежевика |
+------------+---------+
4 rows in set (0.00 sec)
a1
mysql> select * from store;
+----------+-------------+--------------+
| store_id | name        | is_automated |
+----------+-------------+--------------+
|        1 | Купертино   |            1 |
|        2 | Редмонд     |            1 |
|        3 | Маунтин-Вью |            1 |
|        4 | Уотерлу     |            1 |
+----------+-------------+--------------+
4 rows in set (0.00 sec)
a2
mysql> select name from store;
+-------------+
| name        |
+-------------+
| Купертино   |
| Редмонд     |
| Маунтин-Вью |
| Уотерлу     |
+-------------+
a3
mysql> select sum(total) from sale;
+------------+
| sum(total) |
+------------+
|    3345.00 |
+------------+
1 row in set (0.00 sec)
a4
mysql> select store_id from sale group by store_id having sum(total)>0;
+----------+
| store_id |
+----------+
|        1 |
|        2 |
|        3 |
+----------+
a5
mysql> select store_id from store natural left join sale where total is null;
+----------+
| store_id |
+----------+
|        4 |
+----------+
mysql> select store_id, sum(total) from sale group by store_id;
+----------+------------+
| store_id | sum(total) |
+----------+------------+
|        1 |     675.00 |
|        2 |     820.00 |
|        3 |    1850.00 |
+----------+------------+
a6
mysql> select name, avg(total/quantity) from sale natural left join product group by product_id;
+--------+---------------------+
| name   | avg(total/quantity) |
+--------+---------------------+
| Яблоки |        7.0000000000 |
| Роботы |       50.0000000000 |
| Окна   |       52.5000000000 |
+--------+---------------------+
a7
mysql> select name from sale natural left join product group by product_id having count(distinct store_id) = 1;
+------+
| name |
+------+
| Окна |
+------+
a8
mysql> select name from sale natural left join store group by store_id having count(distinct product_id)=1;
+-------------+
| name        |
+-------------+
| Маунтин-Вью |
+-------------+
a9
mysql> select * from sale where total = (select max(total) from sale);
+---------+------------+----------+----------+--------+------------+
| sale_id | product_id | store_id | quantity | total  | date       |
+---------+------------+----------+----------+--------+------------+
|       3 |          3 |        3 |       10 | 600.00 | 2017-01-01 |
+---------+------------+----------+----------+--------+------------+
a10
mysql> select date from sale group by date order by sum(total) desc limit 1;
+------------+
| date       |
+------------+
| 2017-01-02 |
+------------+

---
mysql> source results.sql
Database changed
+------------+---------+
| product_id | name    |
+------------+---------+
|          1 | Яблоки  |
|          2 | Роботы  |
|          3 | Окна    |
|          4 | Ежевика |
+------------+---------+
4 rows in set (0.00 sec)

+-------------+
| name        |
+-------------+
| Купертино   |
| Редмонд     |
| Маунтин-Вью |
| Уотерлу     |
+-------------+
4 rows in set (0.00 sec)

+------------+
| sum(total) |
+------------+
|    3345.00 |
+------------+
1 row in set (0.00 sec)

+----------+
| store_id |
+----------+
|        1 |
|        2 |
|        3 |
+----------+
3 rows in set (0.01 sec)

+----------+
| store_id |
+----------+
|        4 |
+----------+
1 row in set (0.00 sec)

+--------+---------------------+
| name   | avg(total/quantity) |
+--------+---------------------+
| Яблоки |        7.0000000000 |
| Роботы |       50.0000000000 |
| Окна   |       52.5000000000 |
+--------+---------------------+
3 rows in set (0.00 sec)

+------+
| name |
+------+
| Окна |
+------+
1 row in set (0.00 sec)

+-------------+
| name        |
+-------------+
| Маунтин-Вью |
+-------------+
1 row in set (0.00 sec)

+---------+------------+----------+----------+--------+------------+
| sale_id | product_id | store_id | quantity | total  | date       |
+---------+------------+----------+----------+--------+------------+
|       3 |          3 |        3 |       10 | 600.00 | 2017-01-01 |
+---------+------------+----------+----------+--------+------------+
1 row in set (0.00 sec)

+------------+
| date       |
+------------+
| 2017-01-02 |
+------------+
1 row in set (0.00 sec)


 